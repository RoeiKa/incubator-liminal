#!/usr/bin/env python3

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required bgit y applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
import os
import pathlib
import shutil
import subprocess
import sys

import click

from liminal.build import liminal_apps_builder
from liminal.core import environment
from liminal.core.util import files_util
from liminal.runners.airflow import dag
import scripts as s
try:
    import importlib.resources as pkg_resources
except ImportError:
    # Try backported to PY<37 `importlib_resources`.
    import importlib_resources as pkg_resources


@click.group()
def cli():
    pass


def docker_is_running():
    try:
        return not subprocess.check_output("docker info >/dev/null 2>&1", shell=True)
    except subprocess.CalledProcessError as e:
        msg = "Docker is not running. Please start docker service on your machine\n"
        sys.stderr.write(f"ERROR: {msg}")
        raise RuntimeError(msg)


@cli.command("build", short_help="builds dockers from your business logic")
@click.option('--path', default=os.getcwd(), help='Build within this path.')
def build(path):
    click.echo(f'Building liminal apps in {path}')
    if docker_is_running():
        liminal_apps_builder.build_liminal_apps(path)


def deploy_liminal_core_internal(clean):
    with pkg_resources.path(dag, 'liminal_dags.py') as p:
        dags_path=p
    os.makedirs(environment.get_dags_dir(), exist_ok=True)
    dag_target_file = os.path.join(environment.get_liminal_home(), 'liminal_dags.py')
    shutil.copyfile(dags_path, dag_target_file)
    if clean:
        docker_compose_command('build', ['no-cache'])
        docker_compose_command('run',['webserver','initdb'])


def docker_compose_command(command_name, args):
    docker_compose_path, project_dir = get_docker_compose_paths()
    concated_args = ' '.join(args)
    subprocess.call(
        [f'docker-compose -f "{docker_compose_path}" --project-directory {project_dir} {command_name} {concated_args}'],
        env=os.environ, shell=True)

@cli.command("deploy", short_help="deploys your liminal.yaml files to $LIMINAL_HOME folder")
@click.option('--path', default=os.getcwd(), help="folder containing liminal.yaml files")
@click.option('--clean', is_flag=True, default=False, help="re-deploy liminal airflow components from scratch")
def deploy_liminal_apps(path, clean):
    click.echo("deploying liminal yaml files")
    liminal_home = environment.get_liminal_home()
    os.makedirs(liminal_home, exist_ok=True)
    os.makedirs(environment.get_dags_dir(), exist_ok=True)
    deploy_liminal_core_internal(clean)
    config_files = files_util.find_config_files(path)
    for config_file in config_files:
        click.echo(f"deploying liminal file: {config_file}")
        yml_name = os.path.basename(config_file)
        target_yml_name = os.path.join(environment.get_dags_dir(), yml_name)
        shutil.copyfile(config_file, target_yml_name)


@cli.command("start",
             short_help="starts a local airflow in docker compose. should be run after deploy. " +
                        "Make sure docker is running on your machine")
def start():
    if docker_is_running():
        # initialize liminal home by default
        environment.get_liminal_home()
        docker_compose_path, project_dir = get_docker_compose_paths()
        result = subprocess.call(
            [f'docker-compose -f "{docker_compose_path}" --project-directory {project_dir} up'],
            env=os.environ, shell=True)


def get_docker_compose_paths():
    with pkg_resources.path(s, 'docker-compose.yml') as p:
        docker_compose_path = p
    project_dir = pathlib.Path(docker_compose_path).parent.parent.absolute()
    print(f"starting docker compose from path {project_dir}")
    return docker_compose_path, project_dir


if __name__ == '__main__':
    cli()
